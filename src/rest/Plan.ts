import { ITrigger, ITriggerRedirect } from './Trigger';

/**
 * Describes the plan of execution of a search request.
 */
export interface IPlanResponse {
  /**
   * The output that would be included by the Search API in the query response
   * once the search request has been fully processed by the query pipeline.
   */
  processingOutput: {
    /**
     * The query response output generated by _trigger_ rules in the query
     * pipeline (i.e., by `execute`, `notify`, `query`, and `redirect` rules).
     */
    triggers: ITrigger<any>[];
  };
  /**
   * The query expressions that would be sent to the index once the search
   * request has been fully processed by the query pipeline.
   */
  parsedInput: {
    /**
     * The final basic query expression (`q`).
     */
    basicExpression: string;
    /**
     * The final large query expression (`lq`).
     */
    largeExpression: string;
  };
}

/**
 * Describes the plan of execution of a search
 */
export class ExecutionPlan {
  constructor(private response: IPlanResponse) {}

  public get basicExpression() {
    return this.response.parsedInput.basicExpression;
  }

  public get largeExpression() {
    return this.response.parsedInput.largeExpression;
  }

  public get redirectionURL() {
    const redirects: ITriggerRedirect[] = this.response.preprocessingOutput.triggers.filter(trigger => trigger.type === 'redirect');
    return redirects.length ? redirects[0].content : null;
  }
}

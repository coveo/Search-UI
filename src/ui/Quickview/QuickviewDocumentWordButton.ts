import { IWordState } from './QuickviewDocument';
import { QuickviewDocumentIframe } from './QuickviewDocumentIframe';
import { $$ } from '../../utils/Dom';

const HIGHLIGHT_PREFIX = 'CoveoHighlight';

export class QuickviewDocumentWordButton {
  constructor(public wordState: IWordState, public iframe: QuickviewDocumentIframe) {
    this.render();
  }

  private buildName() {
    const name = $$(
      'span',
      {
        className: 'coveo-term-for-quickview-name'
      },
      `${this.wordState.word.text} (${this.wordState.word.count})`
    );

    name.on('click', () => this.navigate(false));
    return name;
  }

  private navigate(backward: boolean) {
    const fromIndex = this.wordState.currentIndex;
    let toIndex: number;

    if (!backward) {
      toIndex = fromIndex == this.wordState.word.count ? 1 : fromIndex + 1;
    } else {
      toIndex = fromIndex <= 1 ? this.wordState.word.count : fromIndex - 1;
    }

    const scroll = this.getScrollingElement();

    // Un-highlight any currently selected element
    const current = $$(scroll).find('[id^="' + HIGHLIGHT_PREFIX + ':' + this.wordState.word.index + '.' + fromIndex + '"]');
    if (current) {
      current.style.border = '';
    }

    // Find and highlight the new element.
    const element = $$(this.iframe.iframeDocument.body).find(
      '[id^="' + HIGHLIGHT_PREFIX + ':' + this.wordState.word.index + '.' + toIndex + '"]'
    );
    element.style.border = '1px dotted #333';
    this.wordState.currentIndex = toIndex;

    // pdf2html docs hide the non-visible frames by default, to speed up browsers.
    // But this prevents keyword navigation from working so we must force show it. This
    // is done by adding the 'opened' class to it (defined by pdf2html).
    if (this.iframe.isNewQuickviewDocument()) {
      const pdf = $$(element).closest('.pc');
      $$(pdf).addClass('opened');
    }

    element.scrollIntoView();

    this.iframe.iframeDocument.body.scrollLeft = 0;
    this.iframe.iframeDocument.body.scrollTop = 0;
  }

  public render() {
    const wordHtml = $$('span', {
      className: 'coveo-term-for-quickview'
    });

    const name = this.buildName();

    wordHtml.append(name.el);

    const quickviewUpArrow = $$('span', {
      className: 'coveo-term-for-quickview-up-arrow'
    });

    const quickviewUpArrowIcon = $$('span', {
      className: 'coveo-term-for-quickview-up-arrow-icon'
    });

    quickviewUpArrow.append(quickviewUpArrowIcon.el);
    quickviewUpArrow.on('click', () => this.navigate(wordState, true, window));

    wordHtml.append(quickviewUpArrow.el);

    const quickviewDownArrow = $$('span', {
      className: 'coveo-term-for-quickview-down-arrow'
    });

    const quickviewDownArrowIcon = $$('span', {
      className: 'coveo-term-for-quickview-down-arrow-icon'
    });

    quickviewDownArrow.append(quickviewDownArrowIcon.el);
    quickviewDownArrow.on('click', () => {
      this.navigate(wordState, false, window);
    });
    wordHtml.append(quickviewDownArrow.el);

    wordHtml.el.style.backgroundColor = wordState.color;
    wordHtml.el.style.borderColor = this.getSaturatedColor(wordState.color);
    quickviewDownArrow.el.style.borderColor = this.getSaturatedColor(wordState.color);

    return wordHtml.el;
  }

  private getScrollingElement(): HTMLElement {
    let found: HTMLElement;

    if (this.iframe.isNewQuickviewDocument()) {
      // 'New' quick views have a #page-container element generated by the pdf2html thing.
      // This is the element we want to scroll on.
      found = $$(this.iframe.iframeDocument.body).find('#page-container');
    }

    // If all else fails, we use the body
    if (!found) {
      found = this.iframe.iframeDocument.body;
    }

    return found;
  }
}
